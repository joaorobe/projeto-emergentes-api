// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Marca {
  id             Int         @id @default(autoincrement())
  nome           String      @db.VarChar(30)
  sapatos         Sapato[]
  @@map("marcas")
}

model Sapato {
  id             Int          @id @default(autoincrement())
  modelo         String       @db.VarChar(30)
  preco          Decimal      @db.Decimal(10, 2)
  foto           String
  tamanho        Tamanhos     @default(BR_38)
  cor            Cores        @default(PRETO)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt()
  destaque       Boolean      @default(true)
  marca          Marca        @relation(fields: [marcaId], references: [id])
  marcaId        Int
  ativo          Boolean      @default(true)
  propostas      Proposta[]
  estoques       Estoque[]
  admin          Admin?       @relation(fields: [adminId], references: [id])
  adminId        String?      @db.VarChar(36)
  @@map("sapatos")
}

model Cliente {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @db.VarChar(40)
  senha         String   @db.VarChar(60)
  cidade        String   @db.VarChar(30) 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt 
  propostas     Proposta[]
  @@map("clientes")
}

model Estoque {
  id          Int      @id @default(autoincrement())
  sapato      Sapato   @relation(fields: [sapatoId], references: [id])
  sapatoId    Int
  tamanho     Tamanhos
  cor         Cores
  preco       Decimal  @db.Decimal(10, 2)
  quantidade  Int      @default(0)
  @@map("estoques")
}

model Admin {
  id            String   @db.VarChar(36) @id @default(uuid())
  nome          String   @db.VarChar(60)
  email         String   @db.VarChar(40)
  senha         String   @db.VarChar(60)   // senha deve ser varchar(60)
  nivel         Int      @db.SmallInt @default(2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt  
  sapatos       Sapato[]
  propostas     Proposta[]
  logs          Log[]
  @@map("admins")
}

model Proposta {
  id          Int       @id @default(autoincrement())
  cliente     Cliente   @relation(fields: [clienteId], references: [id])
  clienteId   String    @db.VarChar(36)
  sapato      Sapato     @relation(fields: [sapatoId], references: [id])
  sapatoId    Int
  descricao   String    @db.VarChar(255)
  resposta    String?   @db.VarChar(255)
  status      StatusProposta @default(PENDENTE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt  
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?    @db.VarChar(36)  
  @@map("propostas")
}

model Log {
  id            Int         @id @default(autoincrement())
  admin         Admin       @relation(fields: [adminId], references: [id])
  adminId       String      @db.VarChar(36)
  descricao     String      @db.VarChar(60)
  complemento   String      @db.VarChar(200)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  @@map("logs")
}

enum Tamanhos {
  BR_36
  BR_37
  BR_38
  BR_39
  BR_40
  BR_41
  BR_42
}

enum Cores {
  PRETO
  BRANCO
  VERMELHO
  AZUL
  CINZA
  MARROM
}

enum StatusProposta {
  PENDENTE
  NOTIFICADO
  CONCLUIDA
}
